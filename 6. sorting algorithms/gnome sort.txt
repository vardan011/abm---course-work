/*Gnome sort.The algorithm is similar to insertion sort. We maintain the pointer to the current element,
if it is larger than the previous one or it is the first - we shift the pointer one position to the right,
otherwise we change the current and previous elements in places and shift to the left.*/
#include <iostream>

using namespace std;

// A function to sort the algorithm using gnome sort 
void gnomeSort(int arr[], int n) 
{ 
	int index = 0; 

	while (index < n) { 
		if (index == 0) 
			index++; 
		if (arr[index] >= arr[index - 1]) 
			index++; 
		else { 
			swap(arr[index], arr[index - 1]); 
			index--; 
		} 
	} 
	return; 
} 

// A utility function ot print an array of size n 
void printArray(int arr[], int n) 
{ 
	cout << "Sorted sequence after Gnome sort: "; 
	for (int i = 0; i < n; i++) 
		cout << arr[i] << " "; 
	cout << "\n"; 
} 

// Driver program to test above functions. 
int main() 
{ 
	int arr[] = { 34, 2, 10, -9 }; 
	int n = sizeof(arr) / sizeof(arr[0]); 
    cout << "Array before sorting: ";
    for(int i = 0; i < 4; i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;
	gnomeSort(arr, n); 
	printArray(arr, n); 

	return 0; 
} 

